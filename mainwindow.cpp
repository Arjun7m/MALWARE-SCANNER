#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QDir>
#include<QCryptographicHash>
#include<QDialog>
#include<QFile>
#include<QTextStream>
#include <qinputmethod.h>
#include<curl/curl.h>
#include<math.h>
#include "details.h"
#include "ui_details.h"
#include<QMessageBox>
MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);              // setup default UI
    setFixedSize(width(), height());  //set window constraints
    //set up other basic settings
    ui->progressBar->setValue(0);
    QString cd=ui->address->text();
    QDir filep(cd);
    auto filelist=filep.entryList();
    // ui->listWidget->addItem("F");
    for (auto i:filelist)
    {

        ui->listWidget->addItem(i);
    }
    //hidden helping objects
    ui->normal->setVisible(false);
    ui->safe->setVisible(false);
    ui->danger->setVisible(false);
    ui->actionf->setVisible(false);
}

MainWindow::~MainWindow()
{
    delete ui;
}

void make_file(int i)
{
    //download file from VirusShare.com and store in the database
    QString zerop="";
    //important preprocessing for correct URL
    int preex=i!=0?(log10(i)+1):1;
    preex=5-preex;
    while(preex--)
      zerop=zerop+"0";
    QString cm="curl https://virusshare.com/hashfiles/VirusShare_"+zerop+QString::number(i)+".md5 >Database/"+QString::number(i)+".txt"; //generate system command with required fields
    std::string str = cm.toStdString();
    const char* p = str.c_str();  //converted to char * for system call

    system(p); //system call

}
void MainWindow::string_gen(QString a)
{
    //List all the strings in the file
    ui->label_3->setPalette(ui->normal->palette());
    ui->label_3->setText(" String Scan Ongoing");
    QString cmd="strings "+a+" >strings.txt";  //Generating commannd with piping
    std::string str = cmd.toStdString();
    const char* p = str.c_str();      //converted to char *
    system(p);     //system call
  return;

}
bool MainWindow::Internet_Scan(QString a)
{
    QDir cf(a);
    QFile w(a);
    //Scan though the API
    ui->label_3->setPalette(ui->normal->palette());
    ui->label_3->setText(" Internet Scan Initiated");         //set UI
    QString cmd="curl --request POST \--url https://www.virustotal.com/api/v3/files \ --header 'x-apikey:cd3fcf8cb9b77299a98f29bc1aa4db1e22fe105032da21a88910643ec309cb53' \--form file=@"+a +">temp.txt";
    std::string str = cmd.toStdString();
    const char* p = str.c_str();   //generated command to upload file to server and get analysis token and converted to char*
    ui->label_3->setPalette(ui->normal->palette());
    ui->label_3->setText(" Uploading File to server");
    ui->progressBar->setValue(33);
    system(p); //system call with piping
    //Reading to input analyis token
    QFile db("temp.txt");
    QString id="";

    if (db.open(QIODevice::ReadOnly))
    {
       QTextStream in(&db);
       while (!in.atEnd())
       {
          QString line = in.readLine();
            if (line[9]=='i' && line[10]=='d')   //if the line contains kewyword 'id'
            {

                int w=15;
                while (line[w]!='"')
                {
                    id=id+line[w];
                    w++;
                }
            }
       }
    }
       db.close();
       ui->progressBar->setValue(66);
      // Generate command to get results using analysis token obtained above
    cmd= "curl --request GET \ --url https://www.virustotal.com/api/v3/analyses/"+id+" \--header 'x-apikey:cd3fcf8cb9b77299a98f29bc1aa4db1e22fe105032da21a88910643ec309cb53 ' >report.txt";
    str = cmd.toStdString();
        const char* f = str.c_str();
        ui->label_3->setPalette(ui->normal->palette());
        ui->label_3->setText(" Obtaining results");
        system(f);   //system call
        //using the default format for report as a tool to check quickly if file is malicious
        int lin=619;
        QFile re("report.txt");
        QString line;
        if (re.open(QIODevice::ReadOnly))
        {
           QTextStream in(&re);
           while (lin-- && !in.atEnd())
           {
               line = in.readLine();

                }
           }

           re.close();
        ui->progressBar->setValue(100);
        // if file is not complete , it means server resposnse is not satisfactory due to queueing of requests
        if (lin>0)
        {
            ui->label_3->setText("Requests over flooded. Please retry later.");
            ui->label_3->setPalette(ui->normal->palette());
        }
           //ui->label_3->setText(""+line[29]);
           return (line[29]=="0");


}
QByteArray hash_com(const QString &fileName,
                        QCryptographicHash::Algorithm hashAlgorithm)
{
    QFile f(fileName);
    // Hash file using the librarires line by line
    if (f.open(QFile::ReadOnly)) {
        QCryptographicHash hash(hashAlgorithm);
        if (hash.addData(&f)) {
            return hash.result();
        }
    }
    return QByteArray();
}
bool MainWindow:: Static_Scan(QString a,int d)
{
    QDir cf(a);
    QFile w(a);
    //Generate Hash
   QByteArray hash=hash_com(a,QCryptographicHash::Md5);
   hash=hash.toHex();
ui->label_3->setPalette(ui->normal->palette());
ui->label_3->setText(" Hash Generated . Search in progress");
QFile db("Database/"+QString::number(d)+".txt");
//Seach for has in db turnwise
if (db.open(QIODevice::ReadOnly))
{
   QTextStream in(&db);
   while (!in.atEnd())
   {
      QString line = in.readLine();
        if (line.toLower()==hash)   //hash found

        {   ui->label_3->setPalette(ui->danger->palette());
            ui->label_3->setText(" File is Malicious");
            ui->actionf->setVisible(true);

            return false;
        }
   }
}
   db.close();
   return true;
}

void MainWindow::on_listWidget_itemClicked(QListWidgetItem *item)
{
    //Update directory list
QString cd=ui->address->text();
cd=cd+"/"+item->text();

auto cf=QDir(cd);
//add files  in the updated directory as item widgets to list widget
if (cf.exists())
{
   ui->address->setText(cd);
    ui->listWidget->clear();
    auto filelist=cf.entryList();
    for (auto i:filelist)
    {

        ui->listWidget->addItem(i);
    }


}

}

void MainWindow::on_pushButton_clicked()
{
    bool safe =true;
    //staic scanner
    for(auto h:ui->listWidget->selectedItems())  //turnwise scan selected items
    {
        QString cd= ui->address->text() +"/" + h->text();
        for (int f=0;f<100;)
        {
            f++;
           safe=MainWindow::Static_Scan(cd,f);   //if file is safe from the nth database file
           if (safe)
           {
               ui->progressBar->setValue(f+1);
           }
           else
               return;
        }
    }
   ui->label_3->setPalette(ui->safe->palette());
    ui->label_3->setText(" File is Clean");
    ui->actionf->setVisible(false);
}

void MainWindow::on_upd_db_clicked()
{
   //Updating database
    ui->label_3->setPalette(ui->normal->palette());

    ui->label_3->setText(" Updating database now. It may take some time.");
    for (int i=0;i<100;i++)
    {

        ui->progressBar->setValue((i+1));
        int preex=i!=0?(log10(i)+1):1;
        QString zerop="";
        preex=5-preex;
        while(preex--)
          zerop=zerop+"0";  //correction for URL

        make_file(i); // add the db file (replacing the exisiting)

    }
    ui->label_3->setPalette(ui->safe->palette());
    ui->label_3->setText(" Database update complete");

}


void MainWindow::on_address_returnPressed()
{

    //Updating directories (list widget)s
    QString cd=ui->address->text();
    QDir filep(cd);
    auto filelist=filep.entryList();
    //if he path is incorrect
    if (!filep.exists())
     {  ui->label_3->setPalette(ui->danger->palette());
        ui->label_3->setText("Path does not exist");
            return;
    }
    else
    {
        ui->label_3->setPalette(ui->normal->palette());
        ui->label_3->setText("Status-Idle");
                    //return;
    }
   // ui->listWidget->addItem("F");
   ui->listWidget->clear();
   // Listwidget update
    for (auto i:filelist)
    {

        ui->listWidget->addItem(i);
    }
}

void MainWindow::on_pushButton_3_clicked()
{
    bool safe =true;
    //Internet Scan
    for(auto h:ui->listWidget->selectedItems())
    {
        QString cd= ui->address->text() +"/" + h->text();
           safe=MainWindow::Internet_Scan(cd); //if safe from Internet scan
           if (safe && ui->label_3->text()[0]!="R")
           {ui->label_3->setPalette(ui->safe->palette());
                ui->label_3->setText(" File is Clean");
                ui->actionf->setVisible(false);
           }
           else if (ui->label_3->text()[0]!="R")
           {
               ui->label_3->setPalette(ui->danger->palette());
                               ui->label_3->setText(" File is Malicious");
                               ui->actionf->setVisible(true);
               }



    }
return;
}

void MainWindow::on_pushButton_2_clicked()
{
    //Deleting the entire database turnwise
    for (int i=0;i<=99;i++)
    {
        QString l="Database/"+QString::number(i)+".txt";
        QFile::remove(l);
    }
}

void MainWindow::on_pushButton_4_clicked()
{
    //Details window
 Details d("Details");
 d.ui->label->setText("Details");
 d.exec();
}

void MainWindow::on_pushButton_5_clicked()
{
    //String generation and window
    for(auto h:ui->listWidget->selectedItems())
    {
        QString cd= ui->address->text() +"/" + h->text();
        string_gen(cd);
        Details D("Strings");
        D.exec();
        ui->label_3->setText("Idle");    }
}

void MainWindow::on_pushButton_6_clicked()
{
    //File deletion utility
    for(auto h:ui->listWidget->selectedItems())
    {
        QString cd= ui->address->text() +"/" + h->text();

        QMessageBox w;
        w.setText("This will permanently delete the file. Do you want to continue ?"); //Warning
        w.setWindowTitle("Warning");
        w.setStandardButtons(QMessageBox::Yes | QMessageBox::No);
        int r=w.exec();
        switch(r)
        {
        case QMessageBox::Yes:
        QFile::remove(cd);
            break;
        case QMessageBox::No:
            break;
        }

    ui->actionf->setVisible(false);
        ui->label_3->setText("Idle");
        ui->address->returnPressed();
    }
}
